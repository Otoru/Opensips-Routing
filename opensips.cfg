################# Global Parameters #####################

include_file "/etc/opensips/global.cfg"

################# Modules Section #######################

mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

include_file "/etc/opensips/import.cfg"
include_file "/etc/opensips/settings.cfg"

################# Lógica de roteamento ##################

route{
	# Validações inciais de uma mensagem SIP
	route(validation);

	# Carregando variáveis de roteamento
	route(lazyloading);

	# Trata pedidos sequênciais
	route(sequential);

	# Trata requisições do tipo CANCEL
	route(cancel); 

	# Faz o roteamento de requisições iniciais
	route(initial);
}


# Faz validações iniciais para qualquer mensagem que chegue ao proxy
route[validation]{
	# Validação do tamanho da mensagem
	route(length);

	# Trata casos de travessia de NAT
	route(nat);

	# Verifica o número de saltos da requisição
	route(maxfwd);
}


# Realiza validação de tamanho nas mensagens
route[length]{
	if (is_method("INVITE") && ($ml>1500)){
	# É um INVITE com tamanho superior a 1500 bytes?
		xlog("L_WARN", "[$ci] - Recived too large INVITE ($ml bytes).");
		t_reply(413, "message too large");
		exit;
	}
}


# Tratamento para verificação de NAT
route[nat]{
	force_rport();
	xlog("L_DBG", "[$ci] - Testing for NAT traversal.");
	if(nat_uac_test(18)){
	# É necessário fazer travessia de NAT?
		xlog("L_DBG", "[$ci] - NAT traversal enabled.");
		if(is_method("REGISTER")){
		# A solicitação é um registro?
			fix_nated_register();
		} else {
			fix_nated_contact();	
		}
		if(!search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes')) {
		# Não conseguiu adicionar a flag de NAT ao contact?
			if(!search_append('m:.*sip:[^>[:cntrl:]]*', ';nat=yes')) {
			# Não conseguiu adicionar a flag de NAT ao contact com compressão?
				xlog("L_WARN", "[$ci] - Failed to add NAT flag in Contact hearder.");
			}
		}
		setflag(NAT);
	}
}


# Roteamento para validação do número de saltos
route[maxfwd]{
	if(!mf_process_maxfwd_header(10)){
	# O header 'Max-Forward' já existe e o número de saltos não pode ser decrementado sem passar de zero?
		switch ($retcode){
			case -1:
				xlog("L_INFO", "[$ci] - Package knocked over due to number of hops.");
				send_reply(483, "Too Many Hops");
				break;
			case -2:
				xlog("L_INFO", "[$ci] - Failed to validate the number of hops.");
				send_reply(500, "Internal Server Error");
		}
		exit;
	}
}


# Roteamento utilizado para carregar variáveis que irão ser necessárias no processo de roteamento.
route[lazyloading]{
	xlog("L_DBG", "[$ci] - Starting lazy loading routing options...");

	$avp(rtp)=1;	# Definindo grupo de RTPs

	xlog("L_DBG", "[$ci] - RTP Group: $avp(rtp).");
}


# Roteamento para sinalizações sequênciais.
route[sequential]{
	if (has_totag()) {
	# A requisição carrega um to-tag?
		xlog("L_INFO", "[$ci] - Request sequential identified.");
		xlog("L_INFO", "[$ci] - Method:'$rm', dialog tags:'$ft/$tt'.");

                if (is_method("ACK") && t_check_trans()) route(relay);
                # É um ACK de um diálogo válido?

		if (!loose_route()){
		# Não exitem blocos de cabeçalhos para roteamento?
			if (is_method("SUBSCRIBE") && is_myself("$rd")) {
			# É uma requisição para o servidor de presença local?
				route(presence);
			} else {
				xlog("L_INFO", "[$ci] - Failed to do sequential order routing.");
				send_reply(404, "Not here");
				exit;
			}
		}

		# Corrige o diálogo se necessário
		if ($DLG_status!=NULL && !validate_dialog()) fix_route_dialog();

		# Regitra o fim de diálogos se esse for o caso
		if (is_method("BYE")) {
			xlog("L_INFO", "[$ci] - BYE received. Finalizing dialog.");
			rtpengine_manage();
			do_accounting("db");
		}

		# Identifica casos de transação de NAT
		if (check_route_param("nat=yes")) setflag(NAT);

		# Da sequência no roteamento
		route(relay);
		exit;
	}
}


# Roteamento utilizado  para mensagens do tipo CANCEL
route[cancel]{
	if (is_method("CANCEL")){
	# A solicitação é um CANCEL?
		if (t_check_trans()) {
		# CANCEL Recebido está associado a um diálogo existente?
			xlog('L_INFO', '[$ci] - Terminating dialog due to CANCEL receiving.');
			route(relay);
		}
		exit;
	}
}


# Roteamento feito para requisições iniciais
route[initial]{
	# Absorve retransmissões sem gerar uma nova transação
	t_check_trans();

	# Realiza o processo de autenticação
	if ( !(is_method("REGISTER")  || is_from_gw() ) ) route(authenticate);

	if (loose_route()) {
	# É possível fazer o roteamento do pacote baseado nos cabeçalhos?
		xlog("L_ERR", "[$ci] - Attempt to route with preloaded Route's.");
		if (!is_method("ACK")) send_reply(403, "Preload Route denied");
		exit;
	}

	# Adiciona um Record-Route ao pacote se necessário
	if (!is_method("REGISTER|MESSAGE")) record_route();

	# Trata requisições do tipo INVITE
	route(invite);

	if (!is_uri_host_local()) {
	# A URI não pertence a nenhum host associado a este proxy?
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# Trata requisições associadas ao servidor de presença;
	if( is_method("PUBLISH|SUBSCRIBE")) route(presence);

	# Trata solicitações de registro.
	route(register);

	if ($rU==NULL) {
    # A Request-URI está incompleta?
		if(is_method("OPTIONS")) {
		# É uma mensagem do tipo OPTIONS?
			sl_send_reply(200, "OK");
		} else {
			send_reply(484, "Address Incomplete");
		}
		exit;
	}

	# Faz o roteamento da chamada de acordo com o dialplan
	route(dialplan);

	# Sinaliza se há a necessidade de fazer travessia de NAT
	if (isbflagset(NAT)) setflag(NAT);

	# Registra o ACC da transação como missed, caso a chamada chegue neste ponto.
	do_accounting("db","missed");

	# Da seguência ao roteamento.
	route(relay);
}


# Roteamento utilizado apra consumir credênciais
route[consumecrendials]{
    proxy_authorize("", "subscriber");
    if ($retcode < 0){
    # A autentição foi falha ou ainda não aconteceu?
        switch($retcode){
           case -5:
            # Ocorreu uma falha ao tentar validar as credênciais?
                xlog("L_INFO", "[$ci] - Failed to test credentials.");
                send_reply(500, "Internal Server Error");
				exit;

            case -4:
            # As credênciais não foram informadas?
                xlog("L_INFO", "[$ci] - Credentials not informed.");
                xlog("L_INFO", "[$ci] - Performing challenge for validation of credentials.");
				break;

            case -3:
            # Estado "sem graça"
                xlog("L_INFO", "[$ci] - Stale nonce.");
                xlog("L_INFO", "[$ci] - Performing challenge for validation of credentials.");
                break;

            case -2:
            # A senha esta incorreta?
                xlog("L_INFO", "[$ci] - A valid user has been informed, but the password is incorrect.");
                xlog("L_INFO", "[$ci] - Performing challenge for validation of credentials.");
                break;

            case -1:
            # O usuário não existe?
                xlog("L_INFO", "[$ci] - The informed user is invalid.");
                xlog("L_INFO", "[$ci] - Performing challenge for validation of credentials.");
				break;
		}       
        proxy_challenge("", 0);
    } else {
        xlog("L_INFO", "[$ci] - User authenticated successfully.");
    }
}


# Roteamento utilizado para autenticação em geral
# Utilizar nos seguintes casos:
# - Requisições de registro
# - Requisições cuso domínio no FROM seja local
route[authenticate]{
	if (is_from_local()) {
	# O FROM é local?
		route(consumecrendials);

		if ($au!=$fU) {
		# o usuário fornecido na autenticação é diferente do fornecido no FROM?
			xlog('L_INFO', '[$ci] - FROM data are different from those provided in the challenge.');
			xlog("L_INFO", "[$ci] - Informed users: '$au'/'$tU'");
			send_reply(403, "Forbidden authentication");
		    exit;
		}

	} else {
	# o FROM não é local
		if (!is_uri_host_local()) {
		# O destino não é local?
			xlog("L_INFO", '[$ci] - User provided in FROM is not local.');
	        send_reply(403, "Relay Forbidden");
	        exit;
		}
	}
}


# Roteamento de requisições de REGISTER
route[register]{
	if (is_method("REGISTER")){
	# A requisição é do tipo REGISTER?
		xlog("L_INFO", "[$ci] - REGISTER request received from '$tu'.");
		route(consumecrendials);

		if (is_present_hf("Expires") && $(hdr(Expires){s.int})==0) {
			xlog("L_INFO", "[$ci] - Request for UNREGISTER contact.");
		}

		if ($au!=$tU) {
		# O usuário autenticado é diferente do usuário presente no TO header?
			xlog('L_INFO', '[$ci] - TO data are different from those provided in the challenge.');
			xlog("L_INFO", "[$ci] - Informed users: '$au'/'$tU'");
			send_reply(403, "Forbidden register");
		    exit;
		} 
	
		if ($proto == "tcp") setflag(TCP_PERSISTENT);

		if (isflagset(NAT)) setbflag(SIP_PING_FLAG);

		if (save("location")) {
		# É possível salvar o registro no banco de dados?
			if (is_present_hf("Expires") && $(hdr(Expires){s.int})==0){
			# É uma solicitação de registro com 'Expires' igual a zero?
				xlog("L_INFO", "[$ci] - Unregister successfully completed.");
			} else {
				xlog("L_INFO", "[$ci] - Registry saved in the database.");
				xlog("L_INFO", "[$ci] - User: '$tu'");
				xlog("L_INFO", "[$ci] - Contact: '$ct.fields(uri)'");
			}
		} else { 
			sl_reply_error();
		}

		exit;
	}
}


# Roteamento para verificar usuário na tabela de localização
route[lookup]{
	xlog("L_INFO", "[$ci] - Checking if a '$ru' is associated with some record.");
	if (!lookup("location","m")){
	# O número na Request URI não está associado a nenhum registro válido na tabela de localizações?

		if (!db_does_uri_exist("$ru","subscriber")) {
		# O número na Request URI não pertence a nenhum usuário?
			xlog("L_INFO", "[$ci] - The number '$rU' is not associated with any platform subscribers.");
			send_reply(420, "Bad Extension");
			exit;
		}

		$avp(statuscode)=404;
		$avp(reason)="Not Found";

		switch($retcode){
			case -1:
				# O usuário não está registrado
				xlog("L_INFO", "[$ci] - Subscriber $rU has no valid contacts in the records table.");
				$avp(reason)="User not registred.";
				break;

			case -2:
				# O usuário está registrado, mas não aceita uma requisição do método em questão
				xlog("L_INFO", "[$ci] - No registered subscriber can accept the method in question.");
				$avp(statucode)=404;
				$avp(reason)="Method Not Allowed";
				break;

			case -3:
				# Falha ao consultar a tabela de registros
				xlog("L_INFO", "[$ci] - Failed to fetch a register.");
				$avp(statuscode)=500;
				$avp(reason)="Internal Server Error";
				break;
		}

		t_reply($avp(statuscode), $avp(reason));
		exit;
	} else {
		xlog("L_INFO", "[$ci] - Registry located in the database.");
	}
}

# Roteamento para tratar de questões ligadas ao servidor de presença
route[presence]{
    if (!t_newtran()) {
	# Ocorreu alguma falha ao abrir uma nova transação?
		xlog("L_INFO", "[$ci] - Failed to open a new transaction.");
		sl_reply_error();
	} else {
		if (is_method("PUBLISH")) handle_publish();
		if (is_method("SUBSCRIBE")) handle_subscribe();
	}
	exit;
}


# Roteamento utilizado para verificar o Sip Session Timer
route[sst]{
	if (is_method("INVITE")) {
	# A requisição em questão é um INVITE?
		xlog("L_INFO", "[$ci] - Checking the Sip Session timer.");
		if (sstCheckMin(1)) {
		# O SST fornecido no INVITE é suficiente?
			xlog("L_ERR", "[$ci] - Sip Session Timer Too Small.");
			exit;
		}
	}
	setflag(SST);
}


# Roteamento para tratar solicitações do tip INVITE
route[invite]{
	if (is_method("INVITE")) {
	# A requisição em questão é um INVITE?
		if (is_present_hf("Proxy-Authorization")){
		# O cabeçalho de autenticação está presente?
			xlog("L_INFO", "[$ci] - Received INVITE request of '$fU@$fd' to '$ru'.");
		} else {
			xlog("L_INFO", "[$ci] - Received INVITE request of '$fU@$fd' to '$ru' without credentials.");
		}

		# Faz a validação do Sip Session Timer
		route(sst);
		
		if (!create_dialog("B")) {
		# Ocorreu alguma falha na hora de criar o diálogo?
			send_reply(500, "Internal Server Error");
			exit;
		}

		# Registra a sinalização no banco de dados.
		do_accounting("db");
	}
}


# Roteamento utilizado para dar sequência no roteamento
route[relay] {
    if (is_method("INVITE")) {
	# É uma requisição de INVITE?
		if (is_present_hf("Proxy-Authorization")) remove_hf("Proxy-Authorization");

		t_on_branch("newbranchops");
		t_on_reply("handleresponse");
		t_on_failure("missedcall");
	}

	if (isflagset(NAT)) add_rr_param(";nat=yes");
	if (!t_relay()) send_reply(500, "Internal Error");
	exit;
}


# Roteamento utilizado para fazer completamento de ligações
route[dialplan]{
	$avp(dialed)=$rU;
	xlog("L_INFO", "[$ci] - Beginning tempantitative dialplan-based routing to $avp(dialed).");
	
	# Faz a tradução de alias, se for o caso
	if(alias_db_lookup("dbaliases")){
		xlog("L_INFO", "[$ci] - Alias translation made. New Request URI: '$ru'");
	}

	# Faz a tradução do número de acordo com os planos de discagem cadastrados.
	if (dp_translate(0, "$rU", $rU)){
		xlog("L_INFO", "[$ci] - Dialed number translated from '$avp(dialed)' to '$rU'.");
	}

	if ($rU=~"^0[0-9]+$") {
	# O Request-URI começa com zero?
		if (!do_routing()) {
		# Não foi possível fazer o roteameno da ligação?
			send_reply(500, "No PSTN Route found");
			exit;
		} else {
			xlog("L_INFO", "[$ci] - Matched rule ID: '$avp(ruleid)'.");
			xlog("L_INFO", "[$ci] - Called send to gateway: '$avp(gwid)'.");
		}
	} else {
	# Tenta fazer o roteamento como uma ligação interna.
		route(lookup);
	}
}

# Roteamento utilizado para controle de requisições
# Também utilizado para controle de fraudes
route[pike]{
	if (is_method("INVITE") && mmg_lookup("cc", $si, $avp(cc))) {
	# Foi possível identificar o país de origem da mensagem e a mesma é um INVITE?
		if ($avp(cc)!="BR"){
		# É uma requisição que veio de fora do Brasil?
			xlog("L_INFO", "[$ci] - Message received from unidentified address.");
			xlog("L_INFO", "[$ci] - Address: '$si'");
			xlog("L_INFO", "[$ci] - Countryz: '$avp(cc)'");
		} else {
			drop;
		}
	}
}


# Roteamento realizada a cada nova branch criada.
branch_route[newbranchops] {
	xlog("L_INFO", "[$ci] - New branch at dialog.");
	rtpengine_manage();
}


# Roteamento utilizado para cada responsta recebida que esteja associada a um diálogo válido
onreply_route[handleresponse] {
	if (has_totag()){
		xlog("L_INFO", "[$ci] - Received reply associated with the dialog.");
		xlog("L_INFO", "[$ci] - Dialog tags: '$ft'/'$tt'.");
	} else {
		xlog("L_INFO", "[$ci] - Received provisional reply associated with the dialog.");	
	}
	xlog("L_INFO", "[$ci] - Message '$rm' with response status '$rs $rr'.");
	
	# Caso a resposta venha através de NAT, ajustamos o contact.
	if (nat_uac_test(18)) fix_nated_contact();
	rtpengine_manage();
}


# Roteamento chamado caso A desligue antes de B atender
failure_route[missedcall] {
	if (t_was_cancelled()) exit;

	if (t_check_status("3[0-9][0-9]")) {
	# Rejeita sinalizações do tipo 3XX
		t_reply(404,"Not found");
		exit;
	}

}


local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") acc_db_request("200 Dialog Timeout", "acc");
}


startup_route {
	xlog("L_INFO", "============================== Start OpenSips ==============================");
}
